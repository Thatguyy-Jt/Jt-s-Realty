//cart

import React, { useContext } from 'react'
import { Link } from 'react-router-dom'
import EcomContext from '../context/EcomContext';


function Cart() {
    const {cartItems, calculateSubTotal, calculateVat, calculateTotalAmount, removeCartItems, updateCartItems} = useContext(EcomContext)
  return (
    <div>
         <div className="container max-w-5xl mx-auto my-24 cart">
            <div className="grid grid-cols-1">
                <div className="p-3 table">
                    <table className='text-center'>
                        <thead className='p-3' >
                            <tr className='p-3'>
                                {/* <th>Name</th> */}
                                <th>Product Image</th>
                                <th>Price</th>
                                <th>Amount</th>
                                <th>Quantity</th>
                                {/* <th>Updates</th> */}
                                <th>Remove</th>
                            </tr>
                        </thead>

                        <tbody>
                            {cartItems.products?.map((item,index)=> (

                            <tr key={item.product?._id}>
                                {/* <td className='flex align-center justify-center'><img src={item.product?.images[0].img}  className='w-[100px] h-[100px]' alt="" /></td> */}
                                
                                 <td>${item.product?.price}</td>
                                <td></td>
                                <td>${item.amount}</td>
                                <td>
                                        <input type="number" onChange={(e)=>updateCartItems(item.product?._id, e.target.value)} min={1}  value={item.quantity}  name="" className='font-bold w-[30%] outline-none text-[black] '  />
                                        
                                  
                                </td>
                                <td>
                                    <button onClick={()=>removeCartItems(item.product?._id)} type="submit"><i className='fa-solid fa-xmark'></i></button>
                                </td>
                                
                            </tr>
                            ))}

                           
                        </tbody>
                    </table>
                    <table>
                        <tbody>
                            <tr>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td className=''> Subtotal: ${calculateSubTotal()}</td>
                            </tr>
                            <tr>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td className=''>VAT (7.5%): ${calculateVat()}</td>
                            </tr>
                            <tr>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td className=''>Total: ${calculateTotalAmount()}</td>
                            </tr>
                            <tr>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td className=''><Link to="/checkout" className='product-btn p-2 text-[fff] rounded bg-[#cda124] hover:bg-[#a42cd6] '>Checkout</Link></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
  )
}

export default Cart;
















import { createContext,useContext,useEffect,useState } from "react";
import useAlert from "../hooks/useAlert";
import AuthContext from "./AuthContext";
import useLocalStorage from "../hooks/useLocalStorage";

const EcomContext = createContext();

export const EcomProvider = ({children})=>{
    const [product, setProduct] = useState([]);
    const {alertInfo, showHide}=useAlert();
    const [cartItems, setCartItems]=useState([]);
    const [ order, setOrder ] = useState(null)
    const [state, dispatch] = useContext(AuthContext);
    const isAuthenticated = state.accessToken !== null;
    const { setItem, getItem } = useLocalStorage();

    
    useEffect(()=>{
        fetchData()
        fetchCart()
    },[])
    
    // useEffect(()=>{
    // },[cartItems])
    
    const fetchData = async()=>{
        try {
            const response = await fetch("http://localhost:5000/api/product");
            const data = await response.json();
            setProduct(data);
        } catch (error) {
            console.log(error)
        }
    }
    
    const featuredProduct = product.filter((product)=>product.featured===true)
    const topSellingProduct = product.filter((product)=>product.topSelling===true)


    // addingn items to cart
    // const addToCart = async (productId, quantity) => {
    //     if (isAuthenticated) {
    //         try{
    //             const res = await fetch("http://localhost:5000/api/add-to-cart", {
    //                 method: "POST",
    //                 headers: {
    //                     "Content-Type": "application/json",
    //                     "auth-token": `${localStorage.getItem("auth-token")}`
    //                 },
    //                 body: JSON.stringify({ productId, quantity })
    //             })
    //             const data = await res.json(); 
    //             if (res.ok) {
    //                 setCartItems(data);
    //                 // setCartItems(data || data.products);
    //                 showHide("success", "You have successfully added item to cart");
    //             }else {
    //                 showHide("error", "Product was not added to cart")
    //             }
               
    //         } catch (error) {
    //             console.log(error);
                
    //         }
    //     } else {
    //         //if unauthenticated
    //         const storedCart = JSON.parse(getItem("cart")) || { products: [] };
    //         const itemIndex = storedCart.products?.findIndex(
    //             (item) => item.product._id === productId
    //         );

    //         if (itemIndex >= 0) {
    //             storedCart.products[itemIndex].quantity += 1;
    //             storedCart.products[itemIndex].amount =
    //             product.price * storedCart.products[itemIndex].quantity;
    //         } else {
    //             storedCart.products.push({
    //                 product,
    //                 quantity: 1,
    //                 amount: product.price * 1,
    //             })
    //             console.log(product);
                
    //         }
    //         localStorage.setItem("cart", JSON.stringify(storedCart));
    //         showHide("success", "Product added to cart successfully!");
    //         setCartItems(storedCart)
    //     }
    // }

    const addToCart = async (productId, quantity, product) => {
        if (isAuthenticated) {
            try {
                // Add a new item to the cart
                const res = await fetch("http://localhost:5000/api/addcart", {
                  method: "POST",
                  headers: {
                    "Content-Type": "application/json",
                    "auth-token": `${localStorage.getItem("auth-token")}`,
                  },
                  body: JSON.stringify({ productId, quantity }),
                });
                const data = await res.json();
                if (res.ok) {
                  setCartItems(data);
                  showHide("success", "You have successfully added item to cart");
                  console.log(user.firstName);
                  console.log("added");
                  
                  
                } else {
                  showHide("error", "Product failed to added to cart");
                }
            } catch (error) {
              console.log(error);
              showHide("error", "An error occurred while adding the item to the cart");
            }  
        }else{
            //if unauthenticated
            const storedCart = JSON.parse(getItem("cart")) || { products:[] };
            const itemIndex = storedCart.products?.findIndex(
                (item)=> item.product._id === productId
            );
            if (itemIndex >= 0) {
                storedCart.products[itemIndex].quantity += 1;
                storedCart.products[itemIndex].amount = product.price * storedCart.products[itemIndex].quantity
            } else {
                storedCart.products.push({
                    product,
                    quantity: 1,
                    amount : product.price * 1
                })
                // console.log(product)
                // console.log(user);
                

            }
            localStorage.setItem("cart", JSON.stringify(storedCart))
            showHide("success", "product added to cart successfully")
            setCartItems(storedCart)
            setCartItems(storedCart)
        }
      };



    //fetch cart
    // const fetchCart = async () => {
    //    if (isAuthenticated) {
    //     const res = await fetch("http://localhost:5000/api/cart", {
    //         method: "GET",
    //         headers: {
    //             "Content-Type": "application/json",
    //             "auth-token": `${localStorage.getItem("auth-token")}`
    //         },
    //     })
    //     const data = await res.json();
    //     if (res.ok) {
    //         setCartItems(data.products && data)
    //     } else {
    //         showHide("error", "Could not get cart")
    //     }
    //    } else {
    //     // unauthenticated 
    //     const localCart = getItem("cart");
    //     // console.log(localCart);
    //     if (localCart) {
    //         setCartItems(JSON.parse(localCart));
    //     } else {
    //         setCartItems([]);
    //     }
    //    }
    // }
    const fetchCart = async () => {
        if (isAuthenticated) { 
            const res = await fetch("http://localhost:5000/api/cart",{
                method: "GET",
                headers:{
                    "Content-Type":"application/json",
                    "auth-token": `${localStorage.getItem("auth-token")}`
                }
            })
            const data = await res.json();
    
            if (res.ok) {
                setCartItems(data.products && data);
            } else {
                showHide("error", "could not get cart")
            }
        } else {
            //unauthenticated user
            const localCart = getItem("cart")
            // console.log(localCart);
            if (localCart) {
                setCartItems(JSON.parse(localCart))
                
            } else {
                setCartItems([])
            }
            
        }
    };


    //adding items to cart
    // const addToCart = (product) => {
    //     const existingItems = cartItems.findIndex(items =>items.id===product.id);
    //     if (existingItems !== -1) {
    //         const itemsInCart = [...cartItems]
    //         const updateCartItems = itemsInCart[existingItems]
    //         updateCartItems.quantity += Number(product.quantity)
    //         updateCartItems.amount = Number(updateCartItems.price * updateCartItems.quantity)
    //         setCartItems(itemsInCart)
    //         showHide("error",` ${product.name} already exist in your cart...`)
    //     } else {
    //         setCartItems([
    //             ...cartItems,
    //             { ...product, amount:product.price * product.quantity}
    //         ])  
    //         showHide("success", `${product.name} added to cart successfully...`)
    //         }
    // }

    //remove cart items
    const removeCartItems = async (productId) =>{
        if (window.confirm("are you sure you want to delete?..")) {
           if (isAuthenticated) {
            try {
                // authenticated
                const res = await fetch("http://localhost:5000/api/delete-cart", {
                    method: "DELETE",
                    headers: {
                        "Content-Type": "application/json",
                        "auth-token": `${localStorage.getItem("auth-token")}`
                    },
                    body: JSON.stringify({ productId })
                   })
                   const data = await res.json();
                   if (res.ok) {
                    showHide("success", "Product successfully deleted from cart ");
                    setCartItems(data || data.products)
                   } 
            } catch (error) {
                console.log(error)
            }
           } else {
            // unaunthenticated
            const storedCart = JSON.parse(localStorage.getItem("cart")) || {
                products: [],
            };
            const itemIndex = storedCart.products.findIndex(
                (item) => item.product._id === productId
            );

            if (itemIndex >= 0) {
                storedCart.products.splice(itemIndex, 1);
                localStorage.setItem("cart", JSON.stringify(storedCart));
                setCartItems(storedCart);
                showHide("success", "Product removed from cart successfully!");
            } else {
                
            }showHide("error", "Product not found in cart.");
           }
         }
        } ;

    //calculate subtotal
    const calculateSubTotal= ()=>{
        return cartItems.products?.reduce((acc,curr)=>acc+curr.amount, 0)
    }

    //calculateVat
    const calculateVat = (vat= 0.075)=>{
        const subtotal = calculateSubTotal()
        return subtotal*vat;
    }
    
    //calculate total Amount
    const calculateTotalAmount = ()=>{
        const vat= calculateVat()
        const subtotal = calculateSubTotal()
        return subtotal + vat;
    }
    
    // updatecart
    //updateCart
    const updateCartItems = async (productId, quantity) => {
        if (isAuthenticated) {
         try {
             const res = await fetch("http://localhost:8000/api/update-cart",{
                 method:"PUT",
                 headers:{
                     "Content-Type":"application/json",
                     "auth-token":`${localStorage.getItem("auth-token")}`
                 },
                 body: JSON.stringify({productId, quantity})
             })
             const data = await res.json()
 
             if (res.status === 200) {
                  const existingItems = cartItems.products?.findIndex(items=>items.product._id === productId);
                  if(existingItems !== -1) {
                      const itemsInCart = [...cartItems.products]
                      const updateCartItems = itemsInCart[existingItems]
                      updateCartItems.quantity = parseInt(quantity)
                      updateCartItems.amount = updateCartItems.product.price * updateCartItems.quantity
                      setCartItems({...itemsInCart, products:itemsInCart})
                  }
             }else{
                 showHide("error","Could not update cart")
             }
         } catch (error) {
            console.log(error);
             
         }
        } else {
         //handle updating cart items in local storage for unauthenticated users
         const storedCart = JSON.parse(localStorage.getItem("cart")) || {
            products: [],
        };

        const itemIndex = storedCart.products.findIndex(
            (item) => item.product._id === productId
        );

        if (itemIndex >= 0) {
            if (quantity === 0) {
                storedCart.products.splice(itemIndex, 1);
            } else {
                // update quantity of item
                storedCart.products[itemIndex].quantity = parseInt(quantity, 10);
                storedCart.products[itemIndex].amount = 
                storedCart.products[itemIndex].product.price *
                storedCart.products[itemIndex].quantity;
            }
            localStorage.setItem("cart", JSON.stringify(storedCart));
            setCartItems(storedCart);
            showHide("success", "Cart updated successfully!");
        }
     }
 };
 

    const createOrder = async (transaction_id, orderId) => {
        try {
            const res = await fetch ("http://localhost:5000/api/payment/verify", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "auth-token": `${localStorage.getItem("auth-token")}`
                },
                body: JSON.stringify({ transaction_id, orderId})
            })
            const data = await res.json();
            if (res.ok) {
                setOrder(data.order)
                console.log(data.order);
                setCartItems([]);
                }else{
                    showHide("error", "Insufficient fund!.... Credit your account");
                }
        } catch (error) {
            console.log(error);
        }
    }

    return (
        <EcomContext.Provider value={{
            product,
            alertInfo,
            featuredProduct,
            topSellingProduct,
            isAuthenticated,
            order,
            showHide,
            addToCart,
            cartItems,
            calculateSubTotal,
            calculateVat,
            calculateTotalAmount,
            removeCartItems,
            updateCartItems,
            createOrder
        }}>
            {children}
        </EcomContext.Provider>
    )
}
export default EcomContext;

